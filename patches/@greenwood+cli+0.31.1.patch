diff --git a/node_modules/@greenwood/cli/package.json b/node_modules/@greenwood/cli/package.json
index 1d90dc3..918c206 100644
--- a/node_modules/@greenwood/cli/package.json
+++ b/node_modules/@greenwood/cli/package.json
@@ -24,7 +24,10 @@
   },
   "main": "./src/index.js",
   "exports": {
-    ".": "./src/index.js",
+    ".": {
+      "types": "./src/types/index.d.ts",
+      "import": "./src/index.js"
+    },
     "./register": "./src/register.js",
     "./src/*": "./src/*"
   },
diff --git a/node_modules/@greenwood/cli/src/config/rollup.config.js b/node_modules/@greenwood/cli/src/config/rollup.config.js
index d82b221..2766f2f 100644
--- a/node_modules/@greenwood/cli/src/config/rollup.config.js
+++ b/node_modules/@greenwood/cli/src/config/rollup.config.js
@@ -337,7 +337,7 @@ function greenwoodImportMetaUrl(compilation) {
         const assetContents = await fs.promises.readFile(url);
         const name = assetName.replace(`.${assetExtension}`, "");
         const request = new Request(url, { headers: { Accept: "text/javascript" } });
-        let bundleExtensions = ["js"];
+        let bundleExtensions = ["js", "ts"];
 
         for (const plugin of customResourcePlugins) {
           if (plugin.shouldServe && (await plugin.shouldServe(url, request))) {
diff --git a/node_modules/@greenwood/cli/src/lifecycles/config.js b/node_modules/@greenwood/cli/src/lifecycles/config.js
index 90cc50e..953efcf 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/config.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/config.js
@@ -81,7 +81,7 @@ const readAndMergeConfig = async () => {
   return new Promise(async (resolve, reject) => {
     try {
       // deep clone of default config
-      const configUrl = new URL("./greenwood.config.js", cwd);
+      const configUrl = new URL("./greenwood.config.ts", cwd);
       let customConfig = Object.assign({}, defaultConfig);
       let hasConfigFile;
       let isSPA;
diff --git a/node_modules/@greenwood/cli/src/lifecycles/graph.js b/node_modules/@greenwood/cli/src/lifecycles/graph.js
index 2947f25..9e4c787 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/graph.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/graph.js
@@ -89,7 +89,7 @@ const generateGraph = async (compilation) => {
             }
 
             const isStatic = isCustom === "static" || extension === ".md" || extension === ".html";
-            const isDynamic = isCustom === "dynamic" || extension === ".js";
+            const isDynamic = isCustom === "dynamic" || extension === ".js" || extension === '.ts';
             const isPage = isStatic || isDynamic;
             let route = `${relativePagePath.replace(".", "").replace(`${extension}`, "")}`;
             let fileContents;
@@ -97,7 +97,7 @@ const generateGraph = async (compilation) => {
             if (isApiRoute) {
               const extension = filenameUrl.pathname.split(".").pop();
 
-              if (extension !== "js" && !isCustom) {
+              if (extension !== "js" && extension !== "ts"&& !isCustom) {
                 console.warn(`${filenameUrl} is not a supported API file extension, skipping...`);
                 return;
               }
diff --git a/node_modules/@greenwood/cli/src/types/api.d.ts b/node_modules/@greenwood/cli/src/types/api.d.ts
new file mode 100644
index 0000000..3788038
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/types/api.d.ts
@@ -0,0 +1,2 @@
+// https://greenwoodjs.dev/docs/pages/api-routes/
+export type ApiRouteHandler = (request: Request) => Response;
diff --git a/node_modules/@greenwood/cli/src/types/compilation.d.ts b/node_modules/@greenwood/cli/src/types/compilation.d.ts
new file mode 100644
index 0000000..754ffdd
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/types/compilation.d.ts
@@ -0,0 +1,30 @@
+import type { Config } from "./config.d.ts";
+import type { Page } from "./content.d.ts";
+
+// https://greenwoodjs.dev/docs/reference/appendix/#compilation
+export type Compilation = {
+  context: {
+    dataDir: URL;
+    outputDir: URL;
+    userWorkspace: URL;
+    apisDir: URL;
+    pagesDir: URL;
+    userLayoutsDir: URL;
+    scratchDir: URL;
+    projectDirectory: URL;
+    layoutsDir: URL;
+  };
+  graph: Page[];
+  config: Config;
+};
+
+export type Frontmatter = {
+  collection?: string;
+  label?: string;
+  layout?: string;
+  title?: string;
+  imports?: string[];
+  data: {
+    [key: string]: string;
+  };
+};
diff --git a/node_modules/@greenwood/cli/src/types/config.d.ts b/node_modules/@greenwood/cli/src/types/config.d.ts
new file mode 100644
index 0000000..1f931ae
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/types/config.d.ts
@@ -0,0 +1,29 @@
+import type { PLUGINS } from "./plugins.d.ts";
+
+// https://greenwoodjs.dev/docs/reference/configuration/
+export type Config = {
+  activeContent?: boolean;
+  basePath?: string;
+  devServer?: {
+    extensions?: string[];
+    hud?: boolean;
+    port?: number;
+    host?: string;
+  };
+  isolation?: boolean;
+  layoutsDirectory?: string;
+  optimization?: "default" | "inline" | "none" | "static";
+  markdown?: {
+    plugins?: string[];
+  };
+  pagesDirectory?: string;
+  plugins?: Array<PLUGINS | Array<PLUGINS>>;
+  polyfills?: {
+    importAttributes?: null | Array<"css" | "json">;
+    importMaps?: boolean;
+  };
+  port?: number;
+  prerender?: boolean;
+  staticRouter?: boolean;
+  workspace?: URL | string;
+};
diff --git a/node_modules/@greenwood/cli/src/types/content.d.ts b/node_modules/@greenwood/cli/src/types/content.d.ts
new file mode 100644
index 0000000..b60083e
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/types/content.d.ts
@@ -0,0 +1,12 @@
+// https://greenwoodjs.dev/docs/content-as-data/pages-data/#schema
+export type Page = {
+  id: string;
+  title: string;
+  label: string;
+  route: string;
+  data?: object;
+};
+
+export type Collection = Page[];
+
+export type Graph = Page[];
diff --git a/node_modules/@greenwood/cli/src/types/index.d.ts b/node_modules/@greenwood/cli/src/types/index.d.ts
new file mode 100644
index 0000000..fa23dcc
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/types/index.d.ts
@@ -0,0 +1,41 @@
+import type { Config } from "./config.d.ts";
+import type { Page, Collection, Graph } from "./content.d.ts";
+import type { Compilation, Frontmatter } from "./compilation.d.ts";
+import type { ApiRouteHandler } from "./api.d.ts";
+import type { SsrRouteHandler, GetBody, GetLayout, GetFrontmatter } from "./ssr.d.ts";
+import type {
+  SERVE_PAGE_OPTIONS,
+  Plugin,
+  AdapterPlugin,
+  ContextPlugin,
+  CopyPlugin,
+  RendererPlugin,
+  ResourcePlugin,
+  RollupPlugin,
+  ServerPlugin,
+  SourcePlugin,
+} from "./plugins.d.ts";
+
+export type {
+  Collection,
+  Config,
+  Graph,
+  Page,
+  Compilation,
+  Frontmatter,
+  SERVE_PAGE_OPTIONS,
+  Plugin,
+  AdapterPlugin,
+  ContextPlugin,
+  CopyPlugin,
+  RendererPlugin,
+  ResourcePlugin,
+  RollupPlugin,
+  ServerPlugin,
+  SourcePlugin,
+  ApiRouteHandler,
+  SsrRouteHandler,
+  GetBody,
+  GetLayout,
+  GetFrontmatter,
+};
\ No newline at end of file
diff --git a/node_modules/@greenwood/cli/src/types/plugins.d.ts b/node_modules/@greenwood/cli/src/types/plugins.d.ts
new file mode 100644
index 0000000..48c9f0b
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/types/plugins.d.ts
@@ -0,0 +1,102 @@
+import type { Compilation } from "./compilation.d.ts";
+
+// https://greenwoodjs.dev/docs/reference/plugins-api/#overview
+
+// TODO why wont this work on the interface?
+type PLUGIN_TYPES =
+  | "adapter"
+  | "context"
+  | "copy"
+  | "renderer"
+  | "resource"
+  | "rollup"
+  | "server"
+  | "source";
+
+export type PLUGINS =
+  | AdapterPlugin
+  | ContextPlugin
+  | CopyPlugin
+  | RendererPlugin
+  | ResourcePlugin
+  | RollupPlugin
+  | ServerPlugin
+  | SourcePlugin;
+
+export interface Plugin {
+  name: string;
+  type: string;
+  provider: (compilation: Compilation) => unknown; // TODO could we narrow this further?
+}
+
+// https://greenwoodjs.dev/docs/reference/plugins-api/#adapter
+export interface AdapterPlugin extends Plugin {
+  provider: (compilation: Compilation) => Promise<Function>;
+}
+
+// https://greenwoodjs.dev/docs/reference/plugins-api/#context
+export interface ContextPlugin extends Plugin {
+  provider: (compilation: Compilation) => { layouts: URL[] };
+}
+
+// https://greenwoodjs.dev/docs/reference/plugins-api/#copy
+export interface CopyPlugin extends Plugin {
+  provider: (compilation: Compilation) => Promise<{ from: URL; to: URL }[]>;
+}
+
+// https://greenwoodjs.dev/docs/reference/plugins-api/#renderer
+export interface RendererPlugin extends Plugin {
+  provider: (compilation: Compilation) => { executeModuleUrl: URL } | { customUrl: URL };
+}
+
+// https://greenwoodjs.dev/docs/reference/plugins-api/#resource
+export type SERVE_PAGE_OPTIONS = "static" | "dynamic";
+
+type Resource = {
+  extensions?: string[];
+  servePage?: SERVE_PAGE_OPTIONS;
+  shouldResolve?: (url: URL) => Promise<boolean>;
+  resolve?: (url: URL) => Promise<Request>;
+  shouldServe?: (url: URL) => Promise<boolean>;
+  serve?: (url: URL) => Promise<Response>;
+  shouldPreIntercept?: (url: URL, request: Request, response: Response) => Promise<boolean>;
+  preIntercept?: (url: URL, request: Request, response: Response) => Promise<Response>;
+  shouldIntercept?: (url: URL, request: Request, response: Response) => Promise<boolean>;
+  intercept?: (url: URL, request: Request, response: Response) => Promise<Response>;
+  shouldOptimize?: (url: URL, response: Response) => Promise<boolean>;
+  optimize?: (url: URL, response: Response) => Promise<Response>;
+};
+
+export interface ResourcePlugin extends Plugin {
+  provider: (compilation: Compilation) => Resource;
+}
+
+// https://greenwoodjs.dev/docs/reference/plugins-api/#rollup
+export interface RollupPlugin extends Plugin {
+  /** @type {import('rollup').Plugin} */
+  provider: (compilation: Compilation) => Plugin[];
+}
+
+// https://greenwoodjs.dev/docs/reference/plugins-api/#server
+type Server = {
+  start: () => Promise<any>;
+  stop?: () => Promise<any>;
+};
+
+export interface ServerPlugin extends Plugin {
+  provider: (compilation: Compilation) => Server;
+}
+
+// https://greenwoodjs.dev/docs/reference/plugins-api/#source
+type SourcePage = {
+  id: string;
+  body: string;
+  title: string;
+  label?: string;
+  route: string;
+  data?: object;
+};
+
+export interface SourcePlugin extends Plugin {
+  provider: (compilation: Compilation) => () => Promise<SourcePage[]>;
+}
diff --git a/node_modules/@greenwood/cli/src/types/ssr.d.ts b/node_modules/@greenwood/cli/src/types/ssr.d.ts
new file mode 100644
index 0000000..e67942e
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/types/ssr.d.ts
@@ -0,0 +1,12 @@
+// https://greenwoodjs.dev/docs/pages/server-rendering/
+import type { Compilation, Frontmatter } from "./compilation.js";
+import type { Page } from "./content.js";
+
+// would be nice if we could enforce the user is using `extends HTMLElement`
+export type SsrRouteHandler = {
+  constructor?(compilation: Compilation, request: Request): string;
+};
+
+export type GetBody = (compilation: Compilation, page: Page, request: Request) => string;
+export type GetLayout = (compilation: Compilation, route: string) => string;
+export type GetFrontmatter = (compilation: Compilation, route: string) => Frontmatter;
